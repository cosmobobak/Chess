Total time: 58.5722 s #STANDARD LISTCOMP ADDITION ON STARTING POSITION 800s
File: .\Objective-V.py
Function: evaluate at line 104

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   104                                               @profile
   105                                               def evaluate(self, depth):
   106    419116    7557406.0     18.0      1.3          mod = 1 if self.position.turn else -1
   107
   108    419116   50700628.0    121.0      8.7          if self.position.is_checkmate():
   109                                                       return 1000000000*(depth+1)*mod
   110    419116   31495895.0     75.1      5.4          if self.position.is_repetition():
   111                                                       rating = -self.contempt*mod
   112    419116    9590552.0     22.9      1.6          elif self.position.can_claim_fifty_moves():
   113                                                       rating = -self.contempt*mod
   114                                                   else:
   115    419116    6407059.0     15.3      1.1              rating = 0
   116    419116   69337583.0    165.4     11.8          rating += sum([self.evaltable['p'][i] for i in self.position.pieces(chess.PAWN, chess.BLACK)])
   117    419116   63645518.0    151.9     10.9          rating -= sum([self.evaltable['P'][i] for i in self.position.pieces(chess.PAWN, chess.WHITE)])
   118    419116   35192970.0     84.0      6.0          rating += sum([self.evaltable['n'][i] for i in self.position.pieces(chess.KNIGHT, chess.BLACK)])
   119    419116   34324118.0     81.9      5.9          rating -= sum([self.evaltable['N'][i] for i in self.position.pieces(chess.KNIGHT, chess.WHITE)])
   120    419116   35809613.0     85.4      6.1          rating += sum([self.evaltable['b'][i] for i in self.position.pieces(chess.BISHOP, chess.BLACK)])
   121    419116   35411084.0     84.5      6.0          rating -= sum([self.evaltable['B'][i] for i in self.position.pieces(chess.BISHOP, chess.WHITE)])
   122    419116   35894716.0     85.6      6.1          rating += sum([self.evaltable['r'][i] for i in self.position.pieces(chess.ROOK, chess.BLACK)])
   123    419116   35999369.0     85.9      6.1          rating -= sum([self.evaltable['R'][i] for i in self.position.pieces(chess.ROOK, chess.WHITE)])
   124    419116   31947030.0     76.2      5.5          rating += sum([self.evaltable['q'][i] for i in self.position.pieces(chess.QUEEN, chess.BLACK)])
   125    419116   31701700.0     75.6      5.4          rating -= sum([self.evaltable['Q'][i] for i in self.position.pieces(chess.QUEEN, chess.WHITE)])
   126    419116   32324982.0     77.1      5.5          rating += sum([self.evaltable['k'][i] for i in self.position.pieces(chess.KING, chess.BLACK)])
   127    419115   32112781.0     76.6      5.5          rating -= sum([self.evaltable['K'][i] for i in self.position.pieces(chess.KING, chess.WHITE)])
   128
   129    419115    6268988.0     15.0      1.1          return rating
------------------------------------------------------------------------------------------------
Total time: 51.5179 s #STANDARD LISTCOMP ADDITION AFTER BOOK LINE 15s
File: .\Objective-V.py
Function: evaluate at line 104

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   104                                               @profile
   105                                               def evaluate(self, depth):
   106    374950    6399685.0     17.1      1.2          mod = 1 if self.position.turn else -1
   107
   108    374950   43650981.0    116.4      8.5          if self.position.is_checkmate():
   109        26        478.0     18.4      0.0              return 1000000000*(depth+1)*mod
   110    374924   50555744.0    134.8      9.8          if self.position.is_repetition():
   111                                                       rating = -self.contempt*mod
   112    374924    8161866.0     21.8      1.6          elif self.position.can_claim_fifty_moves():
   113                                                       rating = -self.contempt*mod
   114                                                   else:
   115    374924    5429721.0     14.5      1.1              rating = 0
   116    374924   55391403.0    147.7     10.8          rating += sum([self.evaltable['p'][i] for i in self.position.pieces(chess.PAWN, chess.BLACK)])
   117    374924   51747294.0    138.0     10.0          rating -= sum([self.evaltable['P'][i] for i in self.position.pieces(chess.PAWN, chess.WHITE)])
   118    374924   28943216.0     77.2      5.6          rating += sum([self.evaltable['n'][i] for i in self.position.pieces(chess.KNIGHT, chess.BLACK)])
   119    374924   28978007.0     77.3      5.6          rating -= sum([self.evaltable['N'][i] for i in self.position.pieces(chess.KNIGHT, chess.WHITE)])
   120    374924   29943926.0     79.9      5.8          rating += sum([self.evaltable['b'][i] for i in self.position.pieces(chess.BISHOP, chess.BLACK)])
   121    374924   29924852.0     79.8      5.8          rating -= sum([self.evaltable['B'][i] for i in self.position.pieces(chess.BISHOP, chess.WHITE)])
   122    374924   31101746.0     83.0      6.0          rating += sum([self.evaltable['r'][i] for i in self.position.pieces(chess.ROOK, chess.BLACK)])
   123    374924   30989932.0     82.7      6.0          rating -= sum([self.evaltable['R'][i] for i in self.position.pieces(chess.ROOK, chess.WHITE)])
   124    374924   27309632.0     72.8      5.3          rating += sum([self.evaltable['q'][i] for i in self.position.pieces(chess.QUEEN, chess.BLACK)])
   125    374924   26021867.0     69.4      5.1          rating -= sum([self.evaltable['Q'][i] for i in self.position.pieces(chess.QUEEN, chess.WHITE)])
   126    374923   27774115.0     74.1      5.4          rating += sum([self.evaltable['k'][i] for i in self.position.pieces(chess.KING, chess.BLACK)])
   127    374923   27562402.0     73.5      5.4          rating -= sum([self.evaltable['K'][i] for i in self.position.pieces(chess.KING, chess.WHITE)])
   128
   129    374923    5292228.0     14.1      1.0          return rating
------------------------------------------------------------------------------------------------
Total time: 60.9994 s #STARTPOS AFTER DICT CHANGE
File: .\Objective-V.py
Function: evaluate at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @profile
    78                                               def evaluate(self, depth):
    79    435509    8021117.0     18.4      1.3          mod = 1 if self.position.turn else -1
    80
    81    435509   53010863.0    121.7      8.7          if self.position.is_checkmate():
    82                                                       return 1000000000*(depth+1)*mod
    83    435509   32824396.0     75.4      5.4          if self.position.is_repetition():
    84                                                       rating = -self.contempt*mod
    85    435509   10047485.0     23.1      1.6          elif self.position.can_claim_fifty_moves():
    86                                                       rating = -self.contempt*mod
    87                                                   else:
    88    435509    6637759.0     15.2      1.1              rating = 0
    89    435509   71888376.0    165.1     11.8          rating += sum([self.evaltable['p'][i] for i in self.position.pieces(chess.PAWN, chess.BLACK)])
    90    435509   66721458.0    153.2     10.9          rating -= sum([self.evaltable['P'][i] for i in self.position.pieces(chess.PAWN, chess.WHITE)])
    91    435509   36443877.0     83.7      6.0          rating += sum([self.evaltable['n'][i] for i in self.position.pieces(chess.KNIGHT, chess.BLACK)])
    92    435509   35818432.0     82.2      5.9          rating -= sum([self.evaltable['N'][i] for i in self.position.pieces(chess.KNIGHT, chess.WHITE)])
    93    435509   37644785.0     86.4      6.2          rating += sum([self.evaltable['b'][i] for i in self.position.pieces(chess.BISHOP, chess.BLACK)])
    94    435509   36813901.0     84.5      6.0          rating -= sum([self.evaltable['B'][i] for i in self.position.pieces(chess.BISHOP, chess.WHITE)])
    95    435509   37592306.0     86.3      6.2          rating += sum([self.evaltable['r'][i] for i in self.position.pieces(chess.ROOK, chess.BLACK)])
    96    435509   37468210.0     86.0      6.1          rating -= sum([self.evaltable['R'][i] for i in self.position.pieces(chess.ROOK, chess.WHITE)])
    97    435509   33116249.0     76.0      5.4          rating += sum([self.evaltable['q'][i] for i in self.position.pieces(chess.QUEEN, chess.BLACK)])
    98    435509   32651802.0     75.0      5.4          rating -= sum([self.evaltable['Q'][i] for i in self.position.pieces(chess.QUEEN, chess.WHITE)])
    99    435509   33684485.0     77.3      5.5          rating += sum([self.evaltable['k'][i] for i in self.position.pieces(chess.KING, chess.BLACK)])
   100    435509   33194842.0     76.2      5.4          rating -= sum([self.evaltable['K'][i] for i in self.position.pieces(chess.KING, chess.WHITE)])
   101
   102    435509    6413197.0     14.7      1.1          return rating